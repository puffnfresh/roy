<!DOCTYPE html>
<html>
  <head>
    <title>Roy</title>
    <meta charset="UTF-8" />
    <style>
    body {
        font-family: 'Droid Sans', sans-serif;
        font-size: 1.1em;
        margin: 0;
        padding: 0em;
        color: #111;
        background: #FFFFEE;
    }
    textarea, pre {
        font-size: 0.8em;
        font-family: 'Droid Sans Mono', monospace;
    }
    .header div {
        width: 33em;
        margin: 0 auto;
    }
    h1 {
        font-family: 'Pacifico', serif;
        margin: 0;
        font-size: 5em;
        line-height: 1.4em;
        height: 1.4em;
        background: transparent url("logo.png") no-repeat 25% 10%;
    }
    a {
        color: #88CC66;
    }
    a:hover {
        text-decoration: none;
    }
    .header, .footer {
        background: #111;
        color: #FFFFEE;
        text-align: center;
    }
    .footer {
        padding: 1em;
    }
    h2 {
        font-size: 1.5em;
        color: #226644;
    }
    h3 {
        font-size: 1.1em;
        color: #88CC66;
    }
    pre {
        overflow: auto;
    }
    .content {
        padding: 1em;
        width: 33em;
        margin: 0 auto;
    }
    </style>
    <script src="http://www.google-analytics.com/ga.js" async="async"></script>
    <script src="bundled-roy.js"></script>
    <link href="http://fonts.googleapis.com/css?family=Droid+Sans:bold,Droid+Sans+Mono" rel="stylesheet" type="text/css" />
    <link href="http://fonts.googleapis.com/css?family=Pacifico" rel="stylesheet" type="text/css" />
    <script>
      var _gaq = _gaq || [];
      _gaq.push(['_setAccount', 'UA-52294-7']);
      _gaq.push(['_trackPageview']);
    </script>
  </head>

  <body>
    <div class="header">
      <div>
        <h1>Roy</h1>
      </div>
    </div>
    <div class="content">
      <h2>About</h2>
      <p>Roy is an experimental programming language that targets JavaScript. It
        tries to meld JavaScript semantics with some features common in static
        functional languages:</p>
      <ul>
        <li><a href="http://en.wikipedia.org/wiki/Type_inference#Hindley.E2.80.93Milner_type_inference_algorithm">Damas-Hindley-Milner type inference</a></li>
        <li><a href="http://jashkenas.github.com/coffee-script/">Whitespace</a> <a href="http://www.haskell.org/haskellwiki/Haskell">significant</a> <a href="http://www.python.org/">syntax</a></li>
        <li><a href="http://en.wikipedia.org/wiki/Metaprogramming">Compile-time meta-programming</a></li>
        <li><a href="http://en.wikipedia.org/wiki/Tagged_union">Simple tagged unions</a></li>
        <li><a href="http://en.wikipedia.org/wiki/Pattern_matching">Pattern matching</a></li>
        <li><a href="http://en.wikipedia.org/wiki/Structural_type_system">Structural typing</a></li>
        <li><a href="http://en.wikipedia.org/wiki/Monad_%28functional_programming%29#do-notation">Monad syntax</a></li>
      </ul>
      <p>Try the current version below. The code is on <a href="https://bitbucket.org/puffnfresh/roy">Bitbucket</a> and <a href="https://github.com/pufuwozu/roy">GitHub</a>. Follow <a href="http://twitter.com/roylangjs">@roylangjs</a> for news on development.</p>
      <h2>Try</h2>
      <h3>Roy input</h3>
      <div>
        <select id="exampleselect">
          <option value="">Custom</option>
          <option value="helloworld">Hello world</option>
          <option value="types">Types</option>
          <option value="funcs">Functions</option>
          <option value="gcd">Greatest common divisor</option>
          <option value="data">Tagged unions</option>
          <option value="structural">Structural</option>
          <option value="tracemonad">Tracing monad</option>
          <option value="ajaxmonad">Ajax monad</option>
        </select>
      </div>
      <textarea id="roycode" rows="15" cols="60"></textarea>
      <h3>JavaScript</h3>
      <pre id="jscode"></pre>
      <input id="jsrun" type="button" value="Run" />
      <h3>Output</h3>
      <pre id="output"></pre>
    </div>
    <div class="footer">
      &copy; 2011 <a href="http://brianmckenna.org/">Brian McKenna</a>
    </div>
    <script>
    var log = function() {
        var i, args = [];
        for(i = 0; i < arguments.length; i++) {
            args.push(arguments[i]);
        }
        document.getElementById('output').innerHTML += args.join(' ') + '\n';
    };
    var newConsole = {};
    // TODO: Properly include Underscore
    _.each(['log', 'info', 'warn', 'error', 'trace', 'assert'], function(f) {
        newConsole[f] = function() {
            log.apply(null, arguments);
            if(typeof console != 'undefined' && console[f]) {
                if(console[f].apply) {
                    console[f].apply(console, arguments);
                } else {
                    // IE
                    console[f]([].slice.call(arguments).join(" "));
                }
            }
        };
    });
    (function() {
        var addEvent = function(s, e, c) {
            var el = document.getElementById(s);
            if(el.addEventListener) {
                el.addEventListener(e, c, false);
            } else {
                el.attachEvent('on' + e, c);
            }
        };
        var examples = {};
        var royCompile = function() {
            var jscode;
            try {
                jscode = roy.compile(document.getElementById("roycode").value).output;
            } catch(e) {
                jscode = e;
            }

            // Works in Firefox
            document.getElementById("jscode").innerHTML = jscode;
            // Works in IE
            document.getElementById("jscode").innerText = jscode;

            return jscode;
        };
        addEvent("exampleselect", 'change', function() {
            var value = document.getElementById("exampleselect").value;
            if(!value) return;
            if(examples[value]) {
                document.getElementById("roycode").value = examples[value];
                royCompile();
            } else {
                var request = new XMLHttpRequest();
                request.onreadystatechange = function() {
                    if(request.readyState == 4) {
                         examples[value] = request.responseText;
                         document.getElementById("roycode").value = examples[value];
                         royCompile();
                    }
                };
                request.open("GET", "examples/" + value + ".roy", true);
                request.send(null);
            }
        });
        addEvent("roycode", 'change', royCompile);
        addEvent("roycode", 'keyup', royCompile);
        addEvent("jsrun", 'click', function() {
            document.getElementById("output").innerHTML = "";
            var code = royCompile();
            var script = document.createElement("script");
            script.text = "(function() {try {var console = newConsole;(function(){\n" + code + "\n})()} catch(e) {log(e);}})();";
            document.body.appendChild(script);
        });
    })();
    </script>
  </body>
</html>
